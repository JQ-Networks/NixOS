{ lib, ... }:
with lib;
with builtins;
types.submodule {
  options = {
    extraConfig = mkOption {
      type = types.nullOr types.lines;
      default = "";
      description = ''
        Other protocol specific config
        e.g. BGP
      '';
    };
    table = mkOption {
      type = types.nullOr types.str;
      description = ''
        Specify a table to which the channel is connected. Default: the first
        table of given nettype.
      '';
      default = null;
    };
    preference = mkOption {
      type = types.nullOr types.str;
      description = ''
        Sets the preference of routes generated by the protocol and imported
        through this channel. Default: protocol dependent.
      '';
      default = null;
    };
    import = mkOption {
      type = types.nullOr types.str;
      description = ''
        Specify a filter to be used for filtering routes coming from the
        protocol to the routing table. <code>all</code> is for keeping all routes,
        <code>none</code> is for dropping all routes. Default: <code>all</code> (except for
        EBGP).
      '';
      default = null;
    };
    export = mkOption {
      type = types.nullOr types.str;
      description = ''
        This is similar to the <code>import</code> keyword, except that it works in
        the direction from the routing table to the protocol. Default: <code>none</code>
        (except for EBGP).
      '';
      default = null;
    };
    importKeepFiltered = mkOption {
      type = types.nullOr types.bool;
      description = ''
        Usually, if an import filter rejects a route, the route is forgotten.
        When this option is active, these routes are kept in the routing table,
        but they are hidden and not propagated to other protocols. But it is
        possible to show them using <code>show route filtered</code>. Note that this
        option does not work for the pipe protocol. Default: off.
      '';
      default = null;
    };
    importLimit = mkOption {
      type = types.nullOr types.str;
      description = ''
        [number | off ] [action warn | block | restart | disable]

        Specify an import route limit (a maximum number of routes imported from
        the protocol) and optionally the action to be taken when the limit is
        hit. Warn action just prints warning log message. Block action discards
        new routes coming from the protocol. Restart and disable actions shut
        the protocol down like appropriate commands. Disable is the default
        action if an action is not explicitly specified. Note that limits are
        reset during protocol reconfigure, reload or restart. Default: <code>off</code>.
      '';
      default = null;
    };

    receiveLimit = mkOption {
      type = types.nullOr types.str;
      description = ''
        [number | off ] [action warn | block | restart | disable]

        Specify an receive route limit (a maximum number of routes received from
        the protocol and remembered). It works almost identically to <code>import
        limit</code> option, the only difference is that if <code>import keep
        filtered</code> option is active, filtered routes are counted towards the
        limit and blocked routes are forgotten, as the main purpose of the
        receive limit is to protect routing tables from overflow. Import limit,
        on the contrary, counts accepted routes only and routes blocked by the
        limit are handled like filtered routes. Default: <code>off</code>.
      '';
      default = null;
    };

    exportLimit = mkOption {
      type = types.nullOr types.str;
      description = ''
        [number | off ] [action warn | block | restart | disable]

        Specify an export route limit, works similarly to the <code>import
        limit</code> option, but for the routes exported to the protocol. This
        option is experimental, there are some problems in details of its
        behavior -- the number of exported routes can temporarily exceed the
        limit without triggering it during protocol reload, exported routes
        counter ignores route blocking and block action also blocks route
        updates of already accepted routes -- and these details will probably
        change in the future. Default: <code>off</code>.
      '';
      default = null;
    };
  };
}
